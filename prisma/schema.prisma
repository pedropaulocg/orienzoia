generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MANAGER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(120)
  email     String    @unique @db.Citext
  role      UserRole  @default(USER)
  password  String    @db.VarChar(255)
  isActive  Boolean   @default(true)
  managerId String? // Para hierarquia manager/subordinado
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relacionamentos de hierarquia
  manager      User?  @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates User[] @relation("ManagerSubordinate")

  // Relacionamentos PDI
  plans        Plan[]
  ActionItem   ActionItem[]
  Feedback     Feedback[]
  RefreshToken RefreshToken[]

  @@index([managerId])
}

model Plan {
  id          String     @id @default(uuid())
  userId      String
  title       String     @db.VarChar(140)
  description String?    @db.Text
  periodFrom  DateTime
  periodTo    DateTime
  status      PlanStatus @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals    Goal[]
  Feedback Feedback[]

  @@index([userId])
}

enum PlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Goal {
  id          String    @id @default(uuid())
  planId      String
  title       String    @db.VarChar(160)
  specific    String?   @db.Text
  measurable  String?   @db.Text
  achievable  String?   @db.Text
  relevant    String?   @db.Text
  timeBound   DateTime?
  progressPct Int       @default(0) @db.SmallInt
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  plan     Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  actions  ActionItem[]
  checkIns CheckIn[]

  @@index([planId])
}

model ActionItem {
  id          String    @id @default(uuid())
  goalId      String
  description String    @db.Text
  ownerId     String?
  dueDate     DateTime?
  doneAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  goal  Goal  @relation(fields: [goalId], references: [id], onDelete: Cascade)
  owner User? @relation(fields: [ownerId], references: [id])

  @@index([goalId])
  @@index([ownerId])
}

model CheckIn {
  id          String   @id @default(uuid())
  goalId      String
  notes       String?  @db.Text
  progressPct Int      @db.SmallInt
  createdAt   DateTime @default(now())

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
}

model Feedback {
  id        String   @id @default(uuid())
  planId    String
  authorId  String
  message   String   @db.Text
  createdAt DateTime @default(now())

  plan   Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id])

  @@index([planId])
  @@index([authorId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}
